mainmodule reader
{
	readonly int numChares;
	readonly size_t fileSize;
	readonly std::string filename;
	readonly size_t allocFloor;
	readonly CProxy_Main mainProxy;

	mainchare Main
	{
		entry Main(CkArgMsg *);
		entry void run()
		{

			serial
			{

				reader = CProxy_Reader::ckNew(numChares);
				std::string roundfile = filename;

				CkPrintf("<Main> Starting timer and reading %s (%jd bytes)\n", roundfile.c_str(), fileSize);

				all_start = CkWallTimer();
				reader.readFile(roundfile);

				// Start background work
				if (bg_on)
				{
					bg = CProxy_Background::ckNew(bg_fixed);
				}
				else
				{
					thisProxy.bgDone(0);
				}
			}

			when maxReduction(double maxTime),
				minReduction(double minTime),
				bgDone(double bg_time)
			{
				serial
				{
					double all_stop = CkWallTimer();
					double total = all_stop - all_start;
					CkPrintf("Total time = %fs\n", total);
					all_time = total; // record time in array for final summary

					bg_time = bg_time / CkNumPes();

					// write to output file
					int fd;
					int saved_stdout = dup(1);

					fd = open(output_file, O_WRONLY | O_APPEND, 0644);
					if (fd == -1)
					{
						CkPrintf("Open output file failed\n");
						CkExit();
					}

					if (dup2(fd, 1) == -1)
					{
						CkPrintf("Dup2 failed to send output to outputfile\n");
						CkExit();
					}

					CkPrintf("%d %d %d %d %llu %f %f\n", numChares, CkNumPes(), CkNumNodes(), fileSize / (1024 * 1024), bg_time, all_time);

					close(fd);
					// restoring stdout

					dup2(saved_stdout, 1);
					close(saved_stdout);

					CkExit();
				}
			}
		}
		entry[reductiontarget] void minReduction(double sumTime);
		entry[reductiontarget] void maxReduction(double maxTime);
		entry[reductiontarget] void bgDone(double time);
	}
	array[1D] Reader
	{
		entry Reader();
		entry void readFile(std::string filename);
	}

	group Background
	{
		entry Background();
		entry[threaded] void dummyBackgroundWork();
		entry void setWorkDone();
	}
}
