mainmodule reader
{
	readonly int numChares;
	readonly size_t fileSize;
	readonly std::string filename;
	readonly size_t allocFloor;
	readonly CProxy_Main mainProxy;

	mainchare Main
	{
		entry Main(CkArgMsg *);
		entry void run()
		{
			for (i = 0; i < 10; i++)
			{
				serial
				{
					CkPrintf("-------ROUND %d-------\n", i);

					reader = CProxy_Reader::ckNew(numChares);
					std::string roundfile = filename + std::to_string(i);

					CkPrintf("<Main> Starting timer and reading %s (%jd bytes)\n", roundfile.c_str(), fileSize);

					all_start = CkWallTimer();
					reader.readFile(roundfile);
				}

				when maxReduction(double maxTime),
					minReduction(double minTime)
				{
					serial
					{
						double all_stop = CkWallTimer();
						double total = all_stop - all_start;
						CkPrintf("Total time = %fs\n", total);
						all_time[i] = total; // record time in array for final summary
					}
				}
			}

			serial
			{

				CkPrintf("-----SUMMARY DATA------\n");
				CkPrintf("%d", numChares);
				for (int i = 0; i < 10; i++)
				{
					CkPrintf(" %f", all_time[i]);
				}
				CkPrintf("\n");
				CkPrintf("-----END SUMMARY------\n");

				CkExit();
			}
		}
		entry[reductiontarget] void minReduction(double sumTime);
		entry[reductiontarget] void maxReduction(double maxTime);
	}
	array[1D] Reader
	{
		entry Reader();
		entry void readFile(std::string filename);
	}
}
