
mainmodule iotest
{
  include "ckio.h";

  mainchare Main
  {
    entry Main(CkArgMsg * m);
    entry void ready(Ck::IO::FileReadyMsg * m);
    entry void run()
    {
      serial
      {
        Ck::IO::Options opts;
        opts.numReaders = numBufChares;

        CkCallback opened(CkIndex_Main::ready(NULL), thisProxy);

        char name[50];

        // convert filename to char array name
        strcpy(name, filename.c_str());

        CkPrintf("Starting timers and opening file: %s\n", name);
        start_time = CkWallTimer();
        Ck::IO::open(name, opened, opts);
      };
      when ready(Ck::IO::FileReadyMsg * m) serial
      {
        time1 = CkWallTimer() - start_time;
        f = m->file;

        if (doBG)
        {
          bg = CProxy_Background::ckNew();
        }

        CkCallback sessionStart(CkIndex_Main::start_read(0), thisProxy);
        Ck::IO::startReadSession(f, fileSize, 0, sessionStart);

        delete m;
      }
      when start_read(Ck::IO::SessionReadyMsg * m) serial
      {
        time2 = CkWallTimer() - time1;
        size_t sizeToRead = fileSize / n; // only works if fileSize is a multiple of n
        session = m->session;
        testers = CProxy_Test::ckNew(m->session, sizeToRead, n);

        delete m;
      }

      when test_read(CkReductionMsg * m) serial
      {
        time3 = CkWallTimer() - time2;
        CkCallback cb(CkIndex_Main::sessionClosed(0), thisProxy);
        Ck::IO::closeReadSession(session, cb);

        if (doBG)
        {
          bg.setWorkDone();
        }

        delete m;
      }

      when sessionClosed(CkReductionMsg * m)
          serial
      {
        time4 = CkWallTimer() - time3;
        CkCallback closedCb(CkIndex_Main::closed(0), thisProxy);

        Ck::IO::close(f, closedCb);
        testers.ckDestroy();
        delete m;
      }
      when closed(CkReductionMsg * m)
          serial
      {
        time5 = CkWallTimer() - time4;
        delete m;

        if (!doBG)
        {
          thisProxy.bgDone(0);
        }
      }

      when bgDone(double time)
          serial
      {
        totalTime = CkWallTimer() - start_time;
        bgTime = time / CkNumPes();

        CkPrintf("-----SUMMARY DATA------\n");
        CkPrintf("%d %d %d %lu %f %f %f %f %f %f %f\n", n, numBufChares, CkNumPes(), fileSize / (1024 * 1024), bgTime, totalTime, time1, time2, time3, time4, time5);
        CkPrintf("-----END SUMMARY------\n");
        CkExit();
      }
    };
    entry void start_read(Ck::IO::SessionReadyMsg * m);
    entry void test_read(CkReductionMsg * m);
    entry void closed(CkReductionMsg * m);
    entry void sessionClosed(CkReductionMsg * m);
    entry void iterDone();
    entry[reductiontarget] void bgDone(double time);
  };

  array[1D] Test
  {
    entry Test(Ck::IO::Session token, size_t bytesToRead);
    entry void readDone(Ck::IO::ReadCompleteMsg * m);
  };

  group Background
  {
    entry Background();
    entry[threaded] void dummyBackgroundWork();
    entry void setWorkDone();
  }
}
