mainmodule iotest
{
  include "ckio.h";

  mainchare Main
  {
    entry Main(CkArgMsg * m);
    entry void ready(Ck::IO::FileReadyMsg * m);

    entry void run()
    {
      for (i = 0; i < iters; i++)
      {
        serial
        {
          CkPrintf("-------ROUND %d-------\n", i);
          Ck::IO::Options opts;

          opts.numReaders = numBufChares;

          CkCallback opened(CkIndex_Main::ready(NULL), thisProxy);

          char name[40];
          snprintf(name, sizeof(name), "/scratch/mzu/mtaylor2/testFile%d", i);

          CkPrintf("STAGE 1: Opening file: %s\n", name);

          start_time = CkWallTimer();
          Ck::IO::open(name, opened, opts);
        }
        when ready(Ck::IO::FileReadyMsg * m) serial
        {
          f = m->file;
          //CkPrintf("STAGE 2: Starting session\n");
          CkCallback sessionStart(CkIndex_Main::start_read(0), thisProxy);
          Ck::IO::startReadSession(f, fileSize, 0, sessionStart);

          delete m;
        }
        when start_read(Ck::IO::SessionReadyMsg * m) serial
        {
          //CkPrintf("STAGE 3: Starting read.\n");
          size_t sizeToRead = fileSize / n; // only works if fileSize is a multiple of n
          session = m->session;
          testers = CProxy_Test::ckNew(m->session, sizeToRead, n);

          delete m;
        }

        when test_read(CkReductionMsg * m) serial
        {
          double end_time = CkWallTimer() - start_time;
          double tp = fileSize / end_time / (1024 * 1024);
          CkPrintf("STAGE 4: Summarizing read and closing file.\n");
          CkPrintf("Main saw read done in time = %f\n", end_time);
          CkPrintf("Run throughput: %f MiB/sec\n", tp);
          totalTP += tp;

          delete m;

          CkCallback cb(CkIndex_Main::sessionClosed(0), thisProxy);
          Ck::IO::closeReadSession(session, cb);	          
	  
          delete m;
        }

        when sessionClosed(CkReductionMsg * m)
           serial
       {
          CkPrintf("STAGE 5: Session closed successfully. Cleaning up testers\n");
	  CkCallback closedCb(CkIndex_Main::closed(0), thisProxy);
	  CkPrintf("Created callback.\n");

	  Ck::IO::close(f, closedCb);			    
	  testers.ckDestroy();
          delete m;
	  
        }
        when closed(CkReductionMsg * m)
            serial
        {
       	 delete m;
          CkPrintf("STAGE 6: Closed complete.\n");
        }
      }

      serial
      {
        CkPrintf("-----SUMMARY------\n");
        CkPrintf("Average throughput across runs: %f MiB/sec\n", totalTP / iters);
        CkExit();
      }
    };

    entry void start_read(Ck::IO::SessionReadyMsg * m);
    entry void test_read(CkReductionMsg * m);
    entry void closed(CkReductionMsg * m);
    entry void sessionClosed(CkReductionMsg * m);
    entry void iterDone();
  };

  array[1D] Test
  {
    entry Test(Ck::IO::Session token, size_t bytesToRead);
    entry void readDone(Ck::IO::ReadCompleteMsg * m);
  }
}
